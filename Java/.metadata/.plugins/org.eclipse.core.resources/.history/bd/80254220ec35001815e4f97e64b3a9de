package test;

import static org.junit.Assert.*;

import main.Condorcet;
import main.VictoireParMatchs;
import main.VoixChoisie;

import org.junit.Before;
import org.junit.Test;

public class CondorcetTest {

	Condorcet electionAvecVainqueurDeCondorcet = new Condorcet(3);
	Condorcet electionAvecCycle = new Condorcet(3);
	Condorcet electionUnVainqueurParMatch = new Condorcet(3);
	Condorcet electionPlusieursVainqueursParMatch = new Condorcet(3);
	
	public static void lireTableau(int[] tableau) {
		for (int i = 0; i < tableau.length; i++) {
			System.out.print(tableau[i] + " ");
		}
		System.out.println();
	}
	
	@Before
	public void setUp() throws Exception {
		VoixChoisie v1 = new VoixChoisie(1, 3); VoixChoisie v2 = new VoixChoisie(2, 3); VoixChoisie v3 = new VoixChoisie(3, 3); VoixChoisie v4 = new VoixChoisie(4, 3); VoixChoisie v5 = new VoixChoisie(5, 3); VoixChoisie v6 = new VoixChoisie(6, 3); 
		v1.ajouterUnChoix(0, 2); v1.ajouterUnChoix(1, 1); v1.ajouterUnChoix(2, 3);
		v2.ajouterUnChoix(0, 1); v2.ajouterUnChoix(1, 0); v2.ajouterUnChoix(2, 3);
		v3.ajouterUnChoix(0, 2); v3.ajouterUnChoix(1, 1); v3.ajouterUnChoix(2, 3);
		v4.ajouterUnChoix(0, 3); v4.ajouterUnChoix(1, 1); v4.ajouterUnChoix(2, 2);
		v5.ajouterUnChoix(0, 0); v5.ajouterUnChoix(1, 1); v5.ajouterUnChoix(2, 3);
		electionAvecVainqueurDeCondorcet.ajouterUneVoix(v1); electionAvecVainqueurDeCondorcet.ajouterUneVoix(v2); electionAvecVainqueurDeCondorcet.ajouterUneVoix(v3); electionAvecVainqueurDeCondorcet.ajouterUneVoix(v4); electionAvecVainqueurDeCondorcet.ajouterUneVoix(v5); 
		
		v1 = new VoixChoisie(1, 3); v2 = new VoixChoisie(2, 3); v3 = new VoixChoisie(3, 3);
		v1.ajouterUnChoix(0, 1); v1.ajouterUnChoix(1, 3); v1.ajouterUnChoix(2, 2);
		v2.ajouterUnChoix(0, 2); v2.ajouterUnChoix(1, 1); v2.ajouterUnChoix(2, 3);
		v3.ajouterUnChoix(0, 3); v3.ajouterUnChoix(1, 2); v3.ajouterUnChoix(2, 1);
		electionAvecCycle.ajouterUneVoix(v1); electionAvecCycle.ajouterUneVoix(v2); electionAvecCycle.ajouterUneVoix(v3); 
		
		v1 = new VoixChoisie(1, 3); v2 = new VoixChoisie(2, 3); v3 = new VoixChoisie(3, 3); v4 = new VoixChoisie(4, 3); v5 = new VoixChoisie(5, 3);
		v1.ajouterUnChoix(0, 2); v1.ajouterUnChoix(1, 1); v1.ajouterUnChoix(2, 3);
		v2.ajouterUnChoix(0, 2); v2.ajouterUnChoix(1, 1); v2.ajouterUnChoix(2, 3);
		v3.ajouterUnChoix(0, 1); v3.ajouterUnChoix(1, 2); v3.ajouterUnChoix(2, 0);
		v4.ajouterUnChoix(0, 1); v4.ajouterUnChoix(1, 2); v4.ajouterUnChoix(2, 0);
		v5.ajouterUnChoix(0, 2); v5.ajouterUnChoix(1, 0); v5.ajouterUnChoix(2, 1);
		v6.ajouterUnChoix(0, 2); v6.ajouterUnChoix(1, 0); v6.ajouterUnChoix(2, 1);
		electionUnVainqueurParMatch.ajouterUneVoix(v1); electionUnVainqueurParMatch.ajouterUneVoix(v2); electionUnVainqueurParMatch.ajouterUneVoix(v3); electionUnVainqueurParMatch.ajouterUneVoix(v4); electionUnVainqueurParMatch.ajouterUneVoix(v5); electionUnVainqueurParMatch.ajouterUneVoix(v6);
		
		/**0 2 2
		   2 0 2
		   2 0 0 */
		
		v1 = new VoixChoisie(1, 3); v2 = new VoixChoisie(2, 3); v3 = new VoixChoisie(3, 3); v4 = new VoixChoisie(4, 3); v5 = new VoixChoisie(5, 3);
		v1.ajouterUnChoix(0, 2); v1.ajouterUnChoix(1, 1); v1.ajouterUnChoix(2, 3);
		v2.ajouterUnChoix(0, 2); v2.ajouterUnChoix(1, 1); v2.ajouterUnChoix(2, 3);
		v3.ajouterUnChoix(0, 1); v3.ajouterUnChoix(1, 2); v3.ajouterUnChoix(2, 3);
		v4.ajouterUnChoix(0, 1); v4.ajouterUnChoix(1, 2); v4.ajouterUnChoix(2, 3);
		v5.ajouterUnChoix(0, 2); v5.ajouterUnChoix(1, 0); v5.ajouterUnChoix(2, 1);
		electionPlusieursVainqueursParMatch.ajouterUneVoix(v1); electionPlusieursVainqueursParMatch.ajouterUneVoix(v2); electionPlusieursVainqueursParMatch.ajouterUneVoix(v3); electionPlusieursVainqueursParMatch.ajouterUneVoix(v4); electionPlusieursVainqueursParMatch.ajouterUneVoix(v5);

	}

	@Test
	public void testRetournerCompteur() {
		electionAvecVainqueurDeCondorcet.elireLeVainqueur();
		int[][] attendu = {{0,0,3},
						   {3,0,4},
						   {1,0,0}};
		assertArrayEquals(attendu, electionAvecVainqueurDeCondorcet.retournerCompteur());
		
		electionAvecCycle.elireLeVainqueur();
		int[][] attendu2 = {{0,1,2},
						  {2,0,1},
						  {1,2,0}};
		assertArrayEquals(attendu2, electionAvecCycle.retournerCompteur());
		
		electionUnVainqueurParMatch.elireLeVainqueur();
		int[][] attendu3 = {{0,2,2},
	            		    {2,0,2},
	            		    {2,0,0}};
		assertArrayEquals(attendu3, electionUnVainqueurParMatch.retournerCompteur());
		
		
		electionPlusieursVainqueursParMatch.elireLeVainqueur();
		int[][] attendu4 = {{0,2,5},
				            {2,0,4},
				   	        {0,0,0}};
		assertArrayEquals(attendu4, electionPlusieursVainqueursParMatch.retournerCompteur());
	}

	@Test
	public void testDonnerNbAleatoire() {
		int nb = 0;
		for (int i = 0; i < 100; i++) {
			for (int j = 0; j < i; j++) {
				nb = Condorcet.donnerNbAleatoire(j, i);
				if (!(nb <= i || nb >=j)) {
					fail("Nombre dans la mauvaise plage de données.");
				}
			}
		}
	}

	@Test
	public void testElireLeVainqueur() {
		/**assertEquals(2, electionAvecVainqueurDeCondorcet.elireLeVainqueur());
		
		int[] nbDeVictoireParAlternatives = new int[3];
		int vainqueur;
		electionAvecCycle.elireLeVainqueur();
		for (int i = 0; i < 1000; i++) {
			vainqueur = electionAvecCycle.elireLeVainqueur();
			if (vainqueur > 3 || vainqueur < 1) { // Le vainqueur doit être soit 0, 1 ou 2.
				fail("Vainqueur en dehors de la plage autorisée");
			}
			else {
				nbDeVictoireParAlternatives[vainqueur - 1] += 1;
			}
		}
		System.out.println("Nombre de victoires par alternatives:");
		lireTableau(nbDeVictoireParAlternatives);
		*/
		assertEquals(1, electionUnVainqueurParMatch.elireLeVainqueur());
	}

	@Test
	public void testToString() {
		electionAvecVainqueurDeCondorcet.elireLeVainqueur();
		String attendu = "Election avec " + 3 + " alternatives et le gagnant est " + 2;
		assertEquals(attendu, electionAvecVainqueurDeCondorcet.toString());
	}

}