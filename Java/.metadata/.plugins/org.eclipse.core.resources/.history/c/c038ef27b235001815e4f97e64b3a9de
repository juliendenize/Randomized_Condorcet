package test;

import static org.junit.Assert.*;

import main.VictoireParMatchs;

import org.junit.Test;

public class VictoireParMatchsTest {

	int[] nbMatchsGagnes1 = {3, 1, 1, 5};
	int[] nbMatchsGagnes2 = {0, 1, 2, 3};
	int[] nbMatchsGagnes3 = {1, 1, 1, 3};
	int[] nbMatchsGagnes4 = {0, 1, 0, 1 , 1, 0, 4};
	VictoireParMatchs test1 = new VictoireParMatchs(nbMatchsGagnes1); 
	VictoireParMatchs test2 = new VictoireParMatchs(nbMatchsGagnes2); 
	VictoireParMatchs test3;
	VictoireParMatchs test; 
	
	
	public void generationVainqueur(int nbVictoiresAGenerer, int[] nbDeVictoireParAlternatives) {
		for (int i = nbVictoiresAGenerer; i > 0; i--) {
			test3 = new VictoireParMatchs(nbMatchsGagnes3);
			vainqueur = test3.retournerVainqueur();
			if (vainqueur > 3 || vainqueur < 0) {
				fail("Vainqueur en dehors de la plage limite");
			}
			else {
				nbDeVictoireParAlternatives[test3.retournerVainqueur()] += 1;
			}
	}
	
	@Test
	public void testRetournerVainqueur() {
		assertEquals(test1.retournerVainqueur(), 0);
		assertEquals(test2.retournerVainqueur(), 2);
		
		int[] nbDeVictoireParAlternatives = new int[3];
		int vainqueur;
		for (int i = 0; i < 100; i++) {
			test3 = new VictoireParMatchs(nbMatchsGagnes3);
			vainqueur = test3.retournerVainqueur();
			if (vainqueur > 3 || vainqueur < 0) {
				fail("Vainqueur en dehors de la plage limite");
			}
			else {
				nbDeVictoireParAlternatives[test3.retournerVainqueur()] += 1;
			}
		}
		int[] nbDeVictoireParAlternatives2 = new int[5];
		for (int i = 0; i < 100; i++) {
			test4 = new VictoireParMatchs(nbMatchsGagnes4);
			vainqueur = test4.retournerVainqueur();
			if (vainqueur == 1 || vainqueur == 3 || vainqueur == 4) {
				nbDeVictoireParAlternatives[vainqueur] += 1;
				fail("Vainqueur en dehors de la plage limite");
			}
			else {
				
			}
		}
		assertEquals(test3.retournerVainqueur(), 1);
		assertEquals(test4.retournerVainqueur(), 0);
	}

}
